
The main module for panacea is pipeline.py

The pipeline is a set of objects linked together through connections to their inputs. 

On one end, the pipeline is connected to a VCF file. 
On the other it is connected to an output object.

On a call to the output, the output reads from its input, which reads from its input, etc, down to the reader

The reader returns a Variant, which then passes through the pipeline.

Each pipeline step either tags the Variant with some information like probability, or diseases, or filters out the Variant.

If the step filters it returns the next applicable Variant, so subsequent steps only see new applicable Variants.

This means the pipeline consumes one Variant at a time.

The current pipeline is set up as such:


	VCFReader - takes a vcf file and reads its contents into Variant objects that it then sends along
		|
	ExonFilter - takes an exon file, and compares input Variants to see if they are in an exon. Ignores if not
		|
	DiseaseFilter - applies the rules for each disease to the input, tagging a Variant if it could be disease causing
		|
	PriorTagger - tags with the prior probability for the variant
		|
	DiseaseOutput - prints variances for each disease out to a file
	
	
Each class should have an __init__ method that takes "input" as an optional argument.
Each class should consume from this input with __next__ calls.
Each class should have the method __iter__ defined ( return self )
Each class should define __next__, which returns the next applicable Variant with info tagged.